import streamlit as st
import requests
from PIL import Image
from io import BytesIO
import time
import os
import json
import base64
import psutil
from typing import Dict, Any, Optional, List
import sqlite3
import uuid
from datetime import datetime
import zipfile

# È†ÅÈù¢ÈÖçÁΩÆ
st.set_page_config(
    page_title="Flux AI Studio - Enhanced",
    page_icon="üé®",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Â¢ûÂº∑Áâà CSS
st.markdown("""
<style>
.koyeb-header {
    background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 50%, #1e40af 100%);
    padding: 2rem;
    border-radius: 15px;
    color: white;
    text-align: center;
    margin-bottom: 2rem;
    box-shadow: 0 8px 32px rgba(37, 99, 235, 0.3);
}

.enhanced-badge {
    background: #10b981;
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 15px;
    font-size: 0.8rem;
    font-weight: bold;
    margin-left: 0.5rem;
}

.custom-api-card {
    background: #f0f9ff;
    border: 1px solid #0ea5e9;
    padding: 1rem;
    border-radius: 10px;
    margin: 1rem 0;
}

.model-card {
    background: #fefce8;
    border: 1px solid #eab308;
    padding: 1rem;
    border-radius: 10px;
    margin: 0.5rem 0;
}

.image-record {
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    padding: 1rem;
    border-radius: 10px;
    margin: 0.5rem 0;
}

.gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
    margin: 1rem 0;
}

.status-indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    display: inline-block;
    margin-right: 0.5rem;
}

.status-online { background: #10b981; }
.status-offline { background: #ef4444; }
.status-testing { background: #f59e0b; }
</style>
""", unsafe_allow_html=True)

# Êï∏ÊìöÂ∫´ÂàùÂßãÂåñ
def init_database():
    """ÂàùÂßãÂåñ SQLite Êï∏ÊìöÂ∫´"""
    conn = sqlite3.connect('flux_ai.db')
    cursor = conn.cursor()
    
    # ÂâµÂª∫Ëá™ÂÆöÁæ© API Ë°®
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS custom_apis (
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            endpoint TEXT NOT NULL,
            api_type TEXT NOT NULL,
            headers TEXT,
            parameters TEXT,
            status TEXT DEFAULT 'active',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # ÂâµÂª∫Ëá™ÂÆöÁæ©Ê®°ÂûãË°®
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS custom_models (
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            api_id TEXT,
            model_id TEXT NOT NULL,
            parameters TEXT,
            description TEXT,
            status TEXT DEFAULT 'active',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (api_id) REFERENCES custom_apis (id)
        )
    ''')
    
    # ÂâµÂª∫ÂúñÁâáË®òÈåÑË°®
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS image_records (
            id TEXT PRIMARY KEY,
            filename TEXT NOT NULL,
            prompt TEXT NOT NULL,
            model_name TEXT,
            api_service TEXT,
            generation_time REAL,
            image_data BLOB,
            metadata TEXT,
            tags TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()

# Ëá™ÂÆöÁæ© API ÁÆ°ÁêÜ
class CustomAPIManager:
    @staticmethod
    def add_api(name: str, endpoint: str, api_type: str, headers: dict = None, parameters: dict = None) -> str:
        """Ê∑ªÂä†Ëá™ÂÆöÁæ© API"""
        api_id = str(uuid.uuid4())
        conn = sqlite3.connect('flux_ai.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO custom_apis (id, name, endpoint, api_type, headers, parameters)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (api_id, name, endpoint, api_type, 
              json.dumps(headers) if headers else None,
              json.dumps(parameters) if parameters else None))
        
        conn.commit()
        conn.close()
        return api_id
    
    @staticmethod
    def get_apis() -> List[Dict]:
        """Áç≤ÂèñÊâÄÊúâËá™ÂÆöÁæ© API"""
        conn = sqlite3.connect('flux_ai.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM custom_apis WHERE status = "active"')
        apis = []
        for row in cursor.fetchall():
            api = {
                'id': row[0],
                'name': row[1],
                'endpoint': row[2],
                'api_type': row[3],
                'headers': json.loads(row[4]) if row[4] else {},
                'parameters': json.loads(row[5]) if row[5] else {},
                'status': row[6],
                'created_at': row[7]
            }
            apis.append(api)
        
        conn.close()
        return apis
    
    @staticmethod
    def test_api(api_id: str, test_prompt: str = "A simple test image") -> Dict[str, Any]:
        """Ê∏¨Ë©¶Ëá™ÂÆöÁæ© API"""
        conn = sqlite3.connect('flux_ai.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM custom_apis WHERE id = ?', (api_id,))
        row = cursor.fetchone()
        
        if not row:
            return {"success": False, "error": "API not found"}
        
        endpoint = row[2]
        api_type = row[3]
        headers = json.loads(row[4]) if row[4] else {}
        parameters = json.loads(row[5]) if row[5] else {}
        
        try:
            if api_type == "replicate":
                # Replicate API Ê†ºÂºè
                payload = {
                    "input": {
                        "prompt": test_prompt,
                        **parameters
                    }
                }
            elif api_type == "huggingface":
                # Hugging Face API Ê†ºÂºè
                payload = {
                    "inputs": test_prompt,
                    "parameters": parameters
                }
            else:
                # ÈÄöÁî®Ê†ºÂºè
                payload = {
                    "prompt": test_prompt,
                    **parameters
                }
            
            response = requests.post(
                endpoint,
                headers=headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                return {"success": True, "status_code": response.status_code}
            else:
                return {"success": False, "error": f"HTTP {response.status_code}"}
        
        except Exception as e:
            return {"success": False, "error": str(e)}
        
        finally:
            conn.close()

# Ëá™ÂÆöÁæ©Ê®°ÂûãÁÆ°ÁêÜ
class CustomModelManager:
    @staticmethod
    def add_model(name: str, api_id: str, model_id: str, parameters: dict = None, description: str = "") -> str:
        """Ê∑ªÂä†Ëá™ÂÆöÁæ©Ê®°Âûã"""
        model_uid = str(uuid.uuid4())
        conn = sqlite3.connect('flux_ai.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO custom_models (id, name, api_id, model_id, parameters, description)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (model_uid, name, api_id, model_id, 
              json.dumps(parameters) if parameters else None, description))
        
        conn.commit()
        conn.close()
        return model_uid
    
    @staticmethod
    def get_models() -> List[Dict]:
        """Áç≤ÂèñÊâÄÊúâËá™ÂÆöÁæ©Ê®°Âûã"""
        conn = sqlite3.connect('flux_ai.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT m.*, a.name as api_name, a.endpoint 
            FROM custom_models m 
            LEFT JOIN custom_apis a ON m.api_id = a.id 
            WHERE m.status = "active"
        ''')
        
        models = []
        for row in cursor.fetchall():
            model = {
                'id': row[0],
                'name': row[1],
                'api_id': row[2],
                'model_id': row[3],
                'parameters': json.loads(row[4]) if row[4] else {},
                'description': row[5],
                'status': row[6],
                'created_at': row[7],
                'api_name': row[8],
                'api_endpoint': row[9]
            }
            models.append(model)
        
        conn.close()
        return models

# ÂúñÁâáË®òÈåÑÁÆ°ÁêÜ
class ImageRecordManager:
    @staticmethod
    def save_image(prompt: str, image_data: bytes, model_name: str, api_service: str, 
                   generation_time: float, metadata: dict = None, tags: List[str] = None) -> str:
        """‰øùÂ≠òÂúñÁâáË®òÈåÑ"""
        record_id = str(uuid.uuid4())
        filename = f"flux_{int(time.time())}_{record_id[:8]}.png"
        
        conn = sqlite3.connect('flux_ai.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO image_records 
            (id, filename, prompt, model_name, api_service, generation_time, image_data, metadata, tags)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (record_id, filename, prompt, model_name, api_service, generation_time, 
              image_data, json.dumps(metadata) if metadata else None,
              json.dumps(tags) if tags else None))
        
        conn.commit()
        conn.close()
        return record_id
    
    @staticmethod
    def get_records(limit: int = 50, search_term: str = "") -> List[Dict]:
        """Áç≤ÂèñÂúñÁâáË®òÈåÑ"""
        conn = sqlite3.connect('flux_ai.db')
        cursor = conn.cursor()
        
        if search_term:
            cursor.execute('''
                SELECT id, filename, prompt, model_name, api_service, generation_time, metadata, tags, created_at
                FROM image_records 
                WHERE prompt LIKE ? OR tags LIKE ?
                ORDER BY created_at DESC LIMIT ?
            ''', (f'%{search_term}%', f'%{search_term}%', limit))
        else:
            cursor.execute('''
                SELECT id, filename, prompt, model_name, api_service, generation_time, metadata, tags, created_at
                FROM image_records 
                ORDER BY created_at DESC LIMIT ?
            ''', (limit,))
        
        records = []
        for row in cursor.fetchall():
            record = {
                'id': row[0],
                'filename': row[1],
                'prompt': row[2],
                'model_name': row[3],
                'api_service': row[4],
                'generation_time': row[5],
                'metadata': json.loads(row[6]) if row[6] else {},
                'tags': json.loads(row[7]) if row[7] else [],
                'created_at': row[8]
            }
            records.append(record)
        
        conn.close()
        return records
    
    @staticmethod
    def get_image_data(record_id: str) -> Optional[bytes]:
        """Áç≤ÂèñÂúñÁâáÊï∏Êìö"""
        conn = sqlite3.connect('flux_ai.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT image_data FROM image_records WHERE id = ?', (record_id,))
        row = cursor.fetchone()
        
        conn.close()
        return row[0] if row else None
    
    @staticmethod
    def delete_record(record_id: str) -> bool:
        """Âà™Èô§ÂúñÁâáË®òÈåÑ"""
        conn = sqlite3.connect('flux_ai.db')
        cursor = conn.cursor()
        
        cursor.execute('DELETE FROM image_records WHERE id = ?', (record_id,))
        success = cursor.rowcount > 0
        
        conn.commit()
        conn.close()
        return success
    
    @staticmethod
    def export_records(record_ids: List[str]) -> bytes:
        """Â∞éÂá∫ÂúñÁâáË®òÈåÑÁÇ∫ ZIP Êñá‰ª∂"""
        zip_buffer = BytesIO()
        
        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
            conn = sqlite3.connect('flux_ai.db')
            cursor = conn.cursor()
            
            for record_id in record_ids:
                cursor.execute('''
                    SELECT filename, prompt, image_data, metadata 
                    FROM image_records WHERE id = ?
                ''', (record_id,))
                
                row = cursor.fetchone()
                if row:
                    filename, prompt, image_data, metadata = row
                    
                    # Ê∑ªÂä†ÂúñÁâáÊñá‰ª∂
                    zip_file.writestr(filename, image_data)
                    
                    # Ê∑ªÂä†ÂÖÉÊï∏ÊìöÊñá‰ª∂
                    info = {
                        'filename': filename,
                        'prompt': prompt,
                        'metadata': json.loads(metadata) if metadata else {}
                    }
                    zip_file.writestr(f"{filename}.json", json.dumps(info, indent=2))
            
            conn.close()
        
        return zip_buffer.getvalue()

# Â¢ûÂº∑ÁöÑ API Ë™øÁî®ÂáΩÊï∏
def call_custom_api(api_id: str, model_id: str, prompt: str, **kwargs) -> Dict[str, Any]:
    """Ë™øÁî®Ëá™ÂÆöÁæ© API"""
    conn = sqlite3.connect('flux_ai.db')
    cursor = conn.cursor()
    
    # Áç≤Âèñ API ‰ø°ÊÅØ
    cursor.execute('SELECT * FROM custom_apis WHERE id = ?', (api_id,))
    api_row = cursor.fetchone()
    
    # Áç≤ÂèñÊ®°Âûã‰ø°ÊÅØ
    cursor.execute('SELECT * FROM custom_models WHERE id = ?', (model_id,))
    model_row = cursor.fetchone()
    
    conn.close()
    
    if not api_row or not model_row:
        return {"success": False, "error": "API ÊàñÊ®°Âûã‰∏çÂ≠òÂú®"}
    
    try:
        endpoint = api_row[2]
        api_type = api_row[3]
        headers = json.loads(api_row[4]) if api_row[4] else {}
        api_parameters = json.loads(api_row[5]) if api_row[5] else {}
        model_parameters = json.loads(model_row[4]) if model_row[4] else {}
        
        # Âêà‰ΩµÂèÉÊï∏
        all_parameters = {**api_parameters, **model_parameters, **kwargs}
        
        if api_type == "replicate":
            payload = {
                "input": {
                    "prompt": prompt,
                    **all_parameters
                }
            }
        elif api_type == "huggingface":
            payload = {
                "inputs": prompt,
                "parameters": all_parameters
            }
        else:
            payload = {
                "prompt": prompt,
                "model": model_row[3],  # model_id
                **all_parameters
            }
        
        response = requests.post(endpoint, headers=headers, json=payload, timeout=120)
        
        if response.status_code == 200:
            if api_type == "replicate":
                # Replicate ËøîÂõû URL ÂàóË°®
                result = response.json()
                if isinstance(result, list) and result:
                    image_url = result[0]
                    img_response = requests.get(image_url, timeout=60)
                    return {
                        "success": True,
                        "data": img_response.content,
                        "service": api_row[1],
                        "model": model_row[1]
                    }
            else:
                # Áõ¥Êé•ËøîÂõûÂúñÁâáÊï∏Êìö
                return {
                    "success": True,
                    "data": response.content,
                    "service": api_row[1],
                    "model": model_row[1]
                }
        
        return {"success": False, "error": f"HTTP {response.status_code}"}
    
    except Exception as e:
        return {"success": False, "error": str(e)}

# ‰∏ªÊáâÁî®
def main():
    # ÂàùÂßãÂåñÊï∏ÊìöÂ∫´
    init_database()
    
    # ‰∏ªÊ®ôÈ°å
    st.markdown("""
    <div class="koyeb-header">
        <h1>üé® Flux AI Studio - Enhanced</h1>
        <span class="enhanced-badge">Ëá™Ë®≠API</span>
        <span class="enhanced-badge">Ëá™Ë®≠Ê®°Âûã</span>
        <span class="enhanced-badge">ÂúñÁâáË®òÈåÑ</span>
        <p style="margin-top: 1rem;">Â∞àÊ•≠Á¥ö AI ÂúñÂÉèÁîüÊàêÂπ≥Âè∞</p>
    </div>
    """, unsafe_allow_html=True)
    
    # ÂâµÂª∫Ê®ôÁ±§È†Å
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["üé® ÂúñÂÉèÁîüÊàê", "üîå Ëá™Ë®≠API", "ü§ñ Ëá™Ë®≠Ê®°Âûã", "üìö ÂúñÁâáË®òÈåÑ", "üìä Áµ±Ë®àÂàÜÊûê"])
    
    with tab1:
        image_generation_tab()
    
    with tab2:
        custom_api_tab()
    
    with tab3:
        custom_model_tab()
    
    with tab4:
        image_records_tab()
    
    with tab5:
        analytics_tab()

def image_generation_tab():
    """ÂúñÂÉèÁîüÊàêÊ®ôÁ±§È†Å"""
    st.subheader("üé® AI ÂúñÂÉèÁîüÊàê")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # ÊúçÂãôÈÅ∏Êìá
        st.markdown("### ÈÅ∏ÊìáÁîüÊàêÊúçÂãô")
        
        service_type = st.radio(
            "ÊúçÂãôÈ°ûÂûã:",
            ["ÂÖßÂª∫ÊúçÂãô", "Ëá™ÂÆöÁæ©ÊúçÂãô"],
            horizontal=True
        )
        
        if service_type == "ÂÖßÂª∫ÊúçÂãô":
            # ÂéüÊúâÁöÑÂÖßÂª∫ÊúçÂãô
            selected_service = st.selectbox(
                "ÈÅ∏ÊìáÊúçÂãô:",
                ["Hugging Face", "Replicate", "Demo Mode"]
            )
            
            if selected_service != "Demo Mode":
                api_token = st.text_input(f"{selected_service} API Token:", type="password")
            else:
                api_token = None
                
            selected_model = None
        
        else:
            # Ëá™ÂÆöÁæ©ÊúçÂãô
            custom_apis = CustomAPIManager.get_apis()
            custom_models = CustomModelManager.get_models()
            
            if not custom_apis:
                st.warning("Â∞öÊú™ÈÖçÁΩÆËá™ÂÆöÁæ© APIÔºåË´ãÂÖàÂâçÂæÄ 'Ëá™Ë®≠API' Ê®ôÁ±§È†ÅÈÄ≤Ë°åÈÖçÁΩÆ")
                return
            
            api_options = {api['name']: api['id'] for api in custom_apis}
            selected_api_name = st.selectbox("ÈÅ∏Êìá API:", list(api_options.keys()))
            selected_api_id = api_options[selected_api_name]
            
            # Áç≤ÂèñË©≤ API ÁöÑÊ®°Âûã
            api_models = [m for m in custom_models if m['api_id'] == selected_api_id]
            
            if not api_models:
                st.warning(f"API '{selected_api_name}' Â∞öÊú™ÈÖçÁΩÆÊ®°ÂûãÔºåË´ãÂÖàÂâçÂæÄ 'Ëá™Ë®≠Ê®°Âûã' Ê®ôÁ±§È†ÅÈÄ≤Ë°åÈÖçÁΩÆ")
                return
            
            model_options = {model['name']: model['id'] for model in api_models}
            selected_model_name = st.selectbox("ÈÅ∏ÊìáÊ®°Âûã:", list(model_options.keys()))
            selected_model = model_options[selected_model_name]
        
        # ÊèêÁ§∫Ë©ûËº∏ÂÖ•
        st.markdown("### ÊèêÁ§∫Ë©ûËº∏ÂÖ•")
        prompt = st.text_area(
            "Ëº∏ÂÖ•ÊèêÁ§∫Ë©û:",
            height=120,
            placeholder="ÊèèËø∞ÊÇ®ÊÉ≥Ë¶ÅÁîüÊàêÁöÑÂúñÂÉè..."
        )
        
        # Ê®ôÁ±§Ë®≠ÁΩÆ
        tags = st.text_input(
            "Ê®ôÁ±§ (Áî®ÈÄóËôüÂàÜÈöî):",
            placeholder="È¢®ÊôØ, ËóùË°ì, È´òÊ∏Ö..."
        ).split(",") if st.text_input(
            "Ê®ôÁ±§ (Áî®ÈÄóËôüÂàÜÈöî):",
            placeholder="È¢®ÊôØ, ËóùË°ì, È´òÊ∏Ö..."
        ).strip() else []
        
        # ÁîüÊàêÂèÉÊï∏
        with st.expander("üîß ÁîüÊàêÂèÉÊï∏"):
            col_param1, col_param2 = st.columns(2)
            with col_param1:
                width = st.selectbox("ÂØ¨Â∫¶", [512, 768, 1024], index=2)
                num_steps = st.slider("Êé®ÁêÜÊ≠•Êï∏", 1, 50, 20)
            with col_param2:
                height = st.selectbox("È´òÂ∫¶", [512, 768, 1024], index=2)
                guidance_scale = st.slider("ÂºïÂ∞éÊØî‰æã", 0.0, 20.0, 7.5)
        
        # ÁîüÊàêÊåâÈàï
        if st.button("üöÄ ÁîüÊàêÂúñÂÉè", type="primary", use_container_width=True):
            if not prompt.strip():
                st.error("Ë´ãËº∏ÂÖ•ÊèêÁ§∫Ë©û")
                return
            
            with st.spinner("ÁîüÊàê‰∏≠..."):
                start_time = time.time()
                
                if service_type == "ÂÖßÂª∫ÊúçÂãô":
                    if selected_service == "Demo Mode":
                        result = create_demo_image(prompt)
                    else:
                        # Ë™øÁî®ÂÖßÂª∫ÊúçÂãô (ÂéüÊúâÈÇèËºØ)
                        result = {"success": False, "error": "ÂÖßÂª∫ÊúçÂãôÈÇèËºØÈúÄË¶ÅÂØ¶Áèæ"}
                else:
                    # Ë™øÁî®Ëá™ÂÆöÁæ©ÊúçÂãô
                    result = call_custom_api(
                        selected_api_id, 
                        selected_model,
                        prompt,
                        width=width,
                        height=height,
                        num_inference_steps=num_steps,
                        guidance_scale=guidance_scale
                    )
                
                generation_time = time.time() - start_time
                
                if result["success"]:
                    st.success(f"‚úÖ ÁîüÊàêÊàêÂäüÔºÅËÄóÊôÇ: {generation_time:.1f}Áßí")
                    
                    # È°ØÁ§∫ÂúñÂÉè
                    image = Image.open(BytesIO(result["data"]))
                    st.image(image, caption=prompt, use_column_width=True)
                    
                    # ‰øùÂ≠òË®òÈåÑ
                    record_id = ImageRecordManager.save_image(
                        prompt=prompt,
                        image_data=result["data"],
                        model_name=result.get("model", "Unknown"),
                        api_service=result.get("service", "Unknown"),
                        generation_time=generation_time,
                        metadata={
                            "width": width,
                            "height": height,
                            "num_steps": num_steps,
                            "guidance_scale": guidance_scale
                        },
                        tags=tags
                    )
                    
                    st.success(f"ÂúñÂÉèÂ∑≤‰øùÂ≠òÂà∞Ë®òÈåÑÂ∫´ (ID: {record_id[:8]})")
                    
                    # ‰∏ãËºâÊåâÈàï
                    st.download_button(
                        "üì• ‰∏ãËºâÂúñÂÉè",
                        data=result["data"],
                        file_name=f"flux_{int(time.time())}.png",
                        mime="image/png"
                    )
                else:
                    st.error(f"‚ùå ÁîüÊàêÂ§±Êïó: {result['error']}")
    
    with col2:
        # ÊúÄËøëÁîüÊàêÁöÑÂúñÂÉè
        st.markdown("### üì∏ ÊúÄËøëÁîüÊàê")
        recent_records = ImageRecordManager.get_records(limit=5)
        
        for record in recent_records:
            with st.container():
                st.markdown(f"**{record['prompt'][:30]}...**")
                st.caption(f"Ê®°Âûã: {record['model_name']} | {record['created_at'][:16]}")
                
                if st.button(f"Êü•Áúã", key=f"view_{record['id'][:8]}"):
                    st.session_state.view_record_id = record['id']

def custom_api_tab():
    """Ëá™ÂÆöÁæ© API Ê®ôÁ±§È†Å"""
    st.subheader("üîå Ëá™ÂÆöÁæ© API ÈÖçÁΩÆ")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown("### Ê∑ªÂä†Êñ∞ API")
        
        with st.form("add_api_form"):
            api_name = st.text_input("API ÂêçÁ®±", placeholder="My Custom API")
            api_endpoint = st.text_input("API Á´ØÈªû", placeholder="https://api.example.com/generate")
            api_type = st.selectbox("API È°ûÂûã", ["replicate", "huggingface", "openai", "custom"])
            
            # Headers ÈÖçÁΩÆ
            st.markdown("**Headers (JSONÊ†ºÂºè):**")
            headers_json = st.text_area(
                "Headers",
                value='{\n  "Authorization": "Bearer YOUR_TOKEN",\n  "Content-Type": "application/json"\n}',
                height=100
            )
            
            # ÂèÉÊï∏ÈÖçÁΩÆ
            st.markdown("**ÈªòË™çÂèÉÊï∏ (JSONÊ†ºÂºè):**")
            params_json = st.text_area(
                "Parameters",
                value='{\n  "num_outputs": 1,\n  "output_format": "png"\n}',
                height=100
            )
            
            if st.form_submit_button("Ê∑ªÂä† API", type="primary"):
                try:
                    headers = json.loads(headers_json) if headers_json.strip() else {}
                    parameters = json.loads(params_json) if params_json.strip() else {}
                    
                    api_id = CustomAPIManager.add_api(
                        name=api_name,
                        endpoint=api_endpoint,
                        api_type=api_type,
                        headers=headers,
                        parameters=parameters
                    )
                    
                    st.success(f"API '{api_name}' Ê∑ªÂä†ÊàêÂäüÔºÅID: {api_id[:8]}")
                    st.rerun()
                
                except json.JSONDecodeError:
                    st.error("JSON Ê†ºÂºèÈåØË™§ÔºåË´ãÊ™¢Êü• Headers Âíå Parameters Ê†ºÂºè")
                except Exception as e:
                    st.error(f"Ê∑ªÂä†Â§±Êïó: {str(e)}")
    
    with col2:
        st.markdown("### ÁèæÊúâ API")
        
        apis = CustomAPIManager.get_apis()
        
        for api in apis:
            st.markdown(f"""
            <div class="custom-api-card">
                <h4>üîå {api['name']}</h4>
                <p><strong>È°ûÂûã:</strong> {api['api_type']}</p>
                <p><strong>Á´ØÈªû:</strong> {api['endpoint'][:50]}...</p>
                <p><strong>ÁãÄÊÖã:</strong> <span class="status-indicator status-online"></span>Ê¥ªË∫ç</p>
            </div>
            """, unsafe_allow_html=True)
            
            col_test, col_edit = st.columns(2)
            
            with col_test:
                if st.button(f"üß™ Ê∏¨Ë©¶", key=f"test_{api['id'][:8]}"):
                    with st.spinner("Ê∏¨Ë©¶‰∏≠..."):
                        result = CustomAPIManager.test_api(api['id'])
                        if result["success"]:
                            st.success("‚úÖ API Ê∏¨Ë©¶ÈÄöÈÅé")
                        else:
                            st.error(f"‚ùå API Ê∏¨Ë©¶Â§±Êïó: {result['error']}")
            
            with col_edit:
                if st.button(f"üìù Á∑®ËºØ", key=f"edit_{api['id'][:8]}"):
                    st.info("Á∑®ËºØÂäüËÉΩÈñãÁôº‰∏≠...")

def custom_model_tab():
    """Ëá™ÂÆöÁæ©Ê®°ÂûãÊ®ôÁ±§È†Å"""
    st.subheader("ü§ñ Ëá™ÂÆöÁæ©Ê®°ÂûãÈÖçÁΩÆ")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown("### Ê∑ªÂä†Êñ∞Ê®°Âûã")
        
        apis = CustomAPIManager.get_apis()
        if not apis:
            st.warning("Ë´ãÂÖàÊ∑ªÂä†Ëá™ÂÆöÁæ© API")
            return
        
        with st.form("add_model_form"):
            model_name = st.text_input("Ê®°ÂûãÂêçÁ®±", placeholder="FLUX.1-dev Custom")
            
            api_options = {api['name']: api['id'] for api in apis}
            selected_api_name = st.selectbox("ÈóúËÅØ API:", list(api_options.keys()))
            selected_api_id = api_options[selected_api_name]
            
            model_id = st.text_input("Ê®°Âûã ID", placeholder="black-forest-labs/flux-1-dev")
            model_description = st.text_area("Ê®°ÂûãÊèèËø∞", height=80)
            
            # Ê®°ÂûãÂèÉÊï∏
            st.markdown("**Ê®°ÂûãÂ∞àÁî®ÂèÉÊï∏ (JSONÊ†ºÂºè):**")
            model_params_json = st.text_area(
                "Model Parameters",
                value='{\n  "aspect_ratio": "1:1",\n  "output_quality": 90\n}',
                height=100
            )
            
            if st.form_submit_button("Ê∑ªÂä†Ê®°Âûã", type="primary"):
                try:
                    parameters = json.loads(model_params_json) if model_params_json.strip() else {}
                    
                    model_uid = CustomModelManager.add_model(
                        name=model_name,
                        api_id=selected_api_id,
                        model_id=model_id,
                        parameters=parameters,
                        description=model_description
                    )
                    
                    st.success(f"Ê®°Âûã '{model_name}' Ê∑ªÂä†ÊàêÂäüÔºÅID: {model_uid[:8]}")
                    st.rerun()
                
                except json.JSONDecodeError:
                    st.error("ÂèÉÊï∏ JSON Ê†ºÂºèÈåØË™§")
                except Exception as e:
                    st.error(f"Ê∑ªÂä†Â§±Êïó: {str(e)}")
    
    with col2:
        st.markdown("### ÁèæÊúâÊ®°Âûã")
        
        models = CustomModelManager.get_models()
        
        for model in models:
            st.markdown(f"""
            <div class="model-card">
                <h4>ü§ñ {model['name']}</h4>
                <p><strong>API:</strong> {model['api_name']}</p>
                <p><strong>Ê®°ÂûãID:</strong> {model['model_id']}</p>
                <p><strong>ÊèèËø∞:</strong> {model['description'][:50]}...</p>
            </div>
            """, unsafe_allow_html=True)
            
            if st.button(f"üìä Êü•ÁúãË©≥ÊÉÖ", key=f"model_detail_{model['id'][:8]}"):
                st.json(model['parameters'])

def image_records_tab():
    """ÂúñÁâáË®òÈåÑÊ®ôÁ±§È†Å"""
    st.subheader("üìö ÂúñÁâáË®òÈåÑÁÆ°ÁêÜ")
    
    # ÊêúÁ¥¢ÂíåÁØ©ÈÅ∏
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col1:
        search_term = st.text_input("üîç ÊêúÁ¥¢ÊèêÁ§∫Ë©ûÊàñÊ®ôÁ±§", placeholder="Ëº∏ÂÖ•ÈóúÈçµË©û...")
    
    with col2:
        limit = st.selectbox("È°ØÁ§∫Êï∏Èáè", [20, 50, 100], index=1)
    
    with col3:
        view_mode = st.selectbox("È°ØÁ§∫Ê®°Âºè", ["ÂàóË°®", "Á∂≤Ê†º"])
    
    # Áç≤ÂèñË®òÈåÑ
    records = ImageRecordManager.get_records(limit=limit, search_term=search_term)
    
    if not records:
        st.info("Êö´ÁÑ°ÂúñÁâáË®òÈåÑ")
        return
    
    # ÊâπÈáèÊìç‰Ωú
    st.markdown("### ÊâπÈáèÊìç‰Ωú")
    col_batch1, col_batch2, col_batch3 = st.columns(3)
    
    with col_batch1:
        if st.button("üì• Â∞éÂá∫ÂÖ®ÈÉ®"):
            record_ids = [r['id'] for r in records]
            zip_data = ImageRecordManager.export_records(record_ids)
            st.download_button(
                "‰∏ãËºâ ZIP Êñá‰ª∂",
                data=zip_data,
                file_name=f"flux_images_{int(time.time())}.zip",
                mime="application/zip"
            )
    
    with col_batch2:
        if st.button("üìä ÁîüÊàêÁµ±Ë®àÂ†±Âëä"):
            generate_analytics_report(records)
    
    with col_batch3:
        if st.button("üóëÔ∏è Ê∏ÖÁ©∫Ë®òÈåÑ"):
            if st.checkbox("Á¢∫Ë™çÊ∏ÖÁ©∫ÊâÄÊúâË®òÈåÑ"):
                # ÂØ¶ÁèæÊ∏ÖÁ©∫ÈÇèËºØ
                st.success("Ë®òÈåÑÂ∑≤Ê∏ÖÁ©∫")
    
    # È°ØÁ§∫Ë®òÈåÑ
    if view_mode == "Á∂≤Ê†º":
        # Á∂≤Ê†ºÊ®°Âºè
        cols = st.columns(3)
        for i, record in enumerate(records):
            with cols[i % 3]:
                # Áç≤ÂèñÂúñÁâáÊï∏Êìö
                image_data = ImageRecordManager.get_image_data(record['id'])
                if image_data:
                    image = Image.open(BytesIO(image_data))
                    st.image(image, use_column_width=True)
                
                st.markdown(f"**{record['prompt'][:30]}...**")
                st.caption(f"{record['model_name']} | {record['created_at'][:16]}")
                
                col_view, col_del = st.columns(2)
                with col_view:
                    if st.button("Êü•Áúã", key=f"grid_view_{record['id'][:8]}"):
                        show_record_details(record)
                with col_del:
                    if st.button("Âà™Èô§", key=f"grid_del_{record['id'][:8]}"):
                        if ImageRecordManager.delete_record(record['id']):
                            st.success("Â∑≤Âà™Èô§")
                            st.rerun()
    
    else:
        # ÂàóË°®Ê®°Âºè
        for record in records:
            with st.expander(f"üñºÔ∏è {record['prompt'][:50]}... | {record['created_at'][:16]}"):
                col_img, col_info = st.columns([1, 2])
                
                with col_img:
                    image_data = ImageRecordManager.get_image_data(record['id'])
                    if image_data:
                        image = Image.open(BytesIO(image_data))
                        st.image(image, use_column_width=True)
                
                with col_info:
                    st.markdown(f"**ÊèêÁ§∫Ë©û:** {record['prompt']}")
                    st.markdown(f"**Ê®°Âûã:** {record['model_name']}")
                    st.markdown(f"**ÊúçÂãô:** {record['api_service']}")
                    st.markdown(f"**ÁîüÊàêÊôÇÈñì:** {record['generation_time']:.1f}Áßí")
                    
                    if record['tags']:
                        tags_str = ", ".join(record['tags'])
                        st.markdown(f"**Ê®ôÁ±§:** {tags_str}")
                    
                    # Êìç‰ΩúÊåâÈàï
                    col_dl, col_edit, col_del = st.columns(3)
                    
                    with col_dl:
                        if image_data:
                            st.download_button(
                                "üì• ‰∏ãËºâ",
                                data=image_data,
                                file_name=record['filename'],
                                mime="image/png",
                                key=f"dl_{record['id'][:8]}"
                            )
                    
                    with col_edit:
                        if st.button("üìù Á∑®ËºØÊ®ôÁ±§", key=f"edit_tags_{record['id'][:8]}"):
                            st.info("Ê®ôÁ±§Á∑®ËºØÂäüËÉΩÈñãÁôº‰∏≠...")
                    
                    with col_del:
                        if st.button("üóëÔ∏è Âà™Èô§", key=f"list_del_{record['id'][:8]}"):
                            if ImageRecordManager.delete_record(record['id']):
                                st.success("Â∑≤Âà™Èô§")
                                st.rerun()

def analytics_tab():
    """Áµ±Ë®àÂàÜÊûêÊ®ôÁ±§È†Å"""
    st.subheader("üìä Áµ±Ë®àÂàÜÊûê")
    
    records = ImageRecordManager.get_records(limit=1000)
    
    if not records:
        st.info("Êö´ÁÑ°Êï∏ÊìöÂèØÂàÜÊûê")
        return
    
    # Âü∫Êú¨Áµ±Ë®à
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Á∏ΩÁîüÊàêÊï∏Èáè", len(records))
    
    with col2:
        avg_time = sum(r['generation_time'] for r in records) / len(records)
        st.metric("Âπ≥ÂùáÁîüÊàêÊôÇÈñì", f"{avg_time:.1f}s")
    
    with col3:
        unique_models = len(set(r['model_name'] for r in records))
        st.metric("‰ΩøÁî®Ê®°ÂûãÊï∏Èáè", unique_models)
    
    with col4:
        unique_services = len(set(r['api_service'] for r in records))
        st.metric("‰ΩøÁî®ÊúçÂãôÊï∏Èáè", unique_services)
    
    # ÂúñË°®ÂàÜÊûê
    col_chart1, col_chart2 = st.columns(2)
    
    with col_chart1:
        st.markdown("### üìà ÊØèÊó•ÁîüÊàêÈáè")
        # ÈÄôË£°ÂèØ‰ª•Ê∑ªÂä†ÊôÇÈñìÂ∫èÂàóÂúñË°®
        st.info("ÂúñË°®ÂäüËÉΩÈñãÁôº‰∏≠...")
    
    with col_chart2:
        st.markdown("### üéØ Ê®°Âûã‰ΩøÁî®ÂàÜÂ∏É")
        # ÈÄôË£°ÂèØ‰ª•Ê∑ªÂä†È§ÖÂúñ
        st.info("ÂúñË°®ÂäüËÉΩÈñãÁôº‰∏≠...")

def show_record_details(record):
    """È°ØÁ§∫Ë®òÈåÑË©≥ÊÉÖ"""
    st.modal("Record Details", record)

def generate_analytics_report(records):
    """ÁîüÊàêÁµ±Ë®àÂ†±Âëä"""
    st.success("Áµ±Ë®àÂ†±ÂëäÁîüÊàêÂäüËÉΩÈñãÁôº‰∏≠...")

def create_demo_image(prompt: str) -> Dict[str, Any]:
    """ÂâµÂª∫ÊºîÁ§∫ÂúñÂÉè"""
    try:
        text = prompt[:30].replace(" ", "+")
        demo_url = f"https://via.placeholder.com/512x512/2563eb/ffffff?text=Demo:+{text}"
        
        response = requests.get(demo_url, timeout=15)
        
        if response.status_code == 200:
            return {
                "success": True,
                "data": response.content,
                "service": "Demo Mode",
                "model": "placeholder"
            }
        else:
            return {"success": False, "error": "ÁÑ°Ê≥ïÂâµÂª∫ÊºîÁ§∫ÂúñÂÉè"}
    except Exception as e:
        return {"success": False, "error": str(e)}

if __name__ == "__main__":
    main()
